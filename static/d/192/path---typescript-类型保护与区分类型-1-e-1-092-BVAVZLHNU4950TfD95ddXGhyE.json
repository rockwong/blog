{"data":{"markdownRemark":{"html":"<h1>类型保护与区分类型</h1>\n<h2>类型保护</h2>\n<p>检查方法成员是否存在，需要使用断言以保证不会报错</p>\n<pre><code class=\"language-ts\">let pet = getSmallPet();\n\nif ((&#x3C;Fish>pet).swim) {\n    (&#x3C;Fish>pet).swim();\n}\nelse {\n    (&#x3C;Bird>pet).fly();\n}\n</code></pre>\n<p>类型谓词为 <code>parameterName is Type</code>形式</p>\n<pre><code class=\"language-ts\">// check 类型\nfunction isFish(pet: Fish | Bird): pet is Fish {\n    return (&#x3C;Fish>pet).swim !== undefined;\n}\n\n// 'swim' 和 'fly' 调用都没有问题了\n// TypeScript不仅知道在 if分支里 pet是 Fish类型； 它还清楚在 else分支里，一定 不是 Fish类型，一定是 Bird类型\n\nif (isFish(pet)) {\n    pet.swim();\n}\nelse {\n    pet.fly();\n}\n</code></pre>\n<p><strong><code>typeof</code>的类型保护</strong></p>\n<p>TS默认 typeof 为类型保护，必须满足以下条件</p>\n<ol>\n<li>typeof v === \"typename\" 和 typeof v !== \"typename\"</li>\n<li>typename 必须是 \"number\"， \"string\"， \"boolean\"或 \"symbol\"</li>\n</ol>\n<p><strong><code>instanceof</code>的类型保护</strong></p>\n<pre><code class=\"language-ts\">class Foo {\n  foo = 123;\n}\n\nclass Bar {\n  bar = 123;\n}\n\nfunction doStuff(arg: Foo | Bar) {\n  if (arg instanceof Foo) {\n    console.log(arg.foo); // ok\n    console.log(arg.bar); // Error\n  } else {\n    // 这个块中，一定是 'bar'\n    console.log(arg.foo); // Error\n    console.log(arg.bar); // ok\n  }\n}\n\ndoStuff(new Foo());\ndoStuff(new Bar());\n</code></pre>\n<p><code>in</code></p>\n<p><code>in</code> 操作符可以安全的检查一个对象上是否存在一个属性，它通常也被做为类型保护使用：</p>\n<pre><code class=\"language-ts\">interface A {\n  x: number;\n}\n\ninterface B {\n  y: string;\n}\n\nfunction doStuff(q: A | B) {\n  if ('x' in q) {\n    // q: A\n  } else {\n    // q: B\n  }\n}\n</code></pre>\n<p><strong><code>!</code>后缀的类型断言去除<code>null</code> 或 <code>undefined</code></strong></p>\n<pre><code class=\"language-ts\">function fixed(name: string | null): string {\n  function postfix(epithet: string) {\n    return name!.charAt(0) + '.  the ' + epithet; // ok\n  }\n  name = name || \"Bob\";\n  return postfix(\"great\");\n}\n</code></pre>\n<p><code>可辨识联合（Discriminated Unions）</code></p>\n<ol>\n<li>具有普通的单例类型属性— 可辨识的特征。</li>\n<li>一个类型别名包含了那些类型的联合— 联合。</li>\n<li>此属性上的类型保护。</li>\n</ol>\n<pre><code class=\"language-ts\">interface Square {\n    kind: \"square\";\n    size: number;\n}\ninterface Rectangle {\n    kind: \"rectangle\";\n    width: number;\n    height: number;\n}\ninterface Circle {\n    kind: \"circle\";\n    radius: number;\n}\n\ntype Shape = Square | Rectangle | Circle;\n\nfunction area(s: Shape) {\n    switch (s.kind) {\n        case \"square\": return s.size * s.size;\n        case \"rectangle\": return s.height * s.width;\n        case \"circle\": return Math.PI * s.radius ** 2;\n    }\n}\n</code></pre>","frontmatter":{"title":"类型保护与区分类型"}}},"pageContext":{"slug":"/notes/类型保护与区分类型/","tagPath":"/Typescript/类型保护与区分类型/"}}