{"data":{"markdownRemark":{"html":"<h1>antd/antd-mobile 国际化方案</h1>\n<blockquote>\n<p>参考自 antd 国际化方案 <a href=\"https://github.com/ant-design/intl-example\">https://github.com/ant-design/intl-example</a></p>\n</blockquote>\n<h2>前端国际化详解、举例</h2>\n<p>国际化的核心步骤有两步：</p>\n<ol>\n<li>创建资源文件，以 key-value 方式存储</li>\n<li>加载资源文件，将页面上 key 的内容替换为相关 value</li>\n</ol>\n<p>在这里我们重点看下如何将页面上的 \"key\" 替换为相关 \"value\"。\n首先，我需要跟大家介绍一个类库 <a href=\"https://github.com/yahoo/react-intl\">React Intl</a>，我们的国际化方案主要是基于它展开的。\nReact Intl 是由 yahoo 开发的，针对 React 的国际化类库，基于 Format.js，支持语言、时间、货币等等国际化。</p>\n<h3>React Intl 国际化步骤</h3>\n<ol>\n<li>判断是否需要引入 polyfill 文件</li>\n<li>引入 react-intl 的 local data</li>\n<li>创建 react-intl 国际化上下文组件</li>\n<li>使用 react-intl's components &#x26; apis，进行国际化开发</li>\n</ol>\n<h4>polyfill</h4>\n<blockquote>\n<p>React Intl uses and builds on the Internationalization API built-in to JavaScript.</p>\n</blockquote>\n<p>如官方文档提到的那样，JavaScript 有一套国际化标准 API，React Intl 也是基于它的，但是由于 Safari 或者一些旧版本的浏览器不支持，于是我们需要在这些浏览器下引入 polyfill 文件（方式有很多种，参见官方文档）：</p>\n<pre><code class=\"language-html\">&#x3C;!-- index.html -->\n&#x3C;script>\n  // 我们这里采用的做法是直接判断 window.Intl 是否存在，从而确定是否要引入 polyfill 文件\n  // 下面的 cdn 地址大家可以修改成本地资源文件，或者参考官方文档其他引入方式\n  if (!window.Intl) {\n    document.writeln('&#x3C;script src=\"https://as.alipayobjects.com/g/component/intl/1.0.1/Intl.js\">' + '&#x3C;' + '/script>');\n    document.writeln('&#x3C;script src=\"https://as.alipayobjects.com/g/component/intl/1.0.1/locale-data/jsonp/en.js\">' + '&#x3C;' + '/script>');\n  }\n&#x3C;/script>\n</code></pre>\n<h4>引入 react-intl 的 local data</h4>\n<pre><code class=\"language-javascript\">import { addLocaleData } from 'react-intl';\nimport en from 'react-intl/locale-data/en';\naddLocaleData(en);\n</code></pre>\n<p>react-intl 在做国际化的时候需要一些特有的 local data，主要是进行相对时间翻译时，比如昨天、今天、明天、几分钟前、几个月前之类的。\n我们通过 <code>addLocaleData</code> 这个方法加载相关内容，大家可以根据实际情况加载需要的 locale-data。</p>\n<h4>创建 react-intl 国际化上下文组件</h4>\n<p>为了能够使用 react-intl 进行国际化，跟 redux 这些框架一样，我们需要一个 Provider Component，用它来提供国际化的上下文，具体用法：</p>\n<pre><code class=\"language-html\">ReactDOM.render(\n  &#x3C;IntlProvider\n    locale={appLocale.locale}\n    messages={appLocale.messages}\n    formats={appLocale.formats}\n  >\n    &#x3C;Provider store={store}>\n      &#x3C;Routes history={window.appHistory} />\n    &#x3C;/Provider>\n  &#x3C;/IntlProvider>,\n  document.getElementById('__react-content')\n);\n</code></pre>\n<h3>国际化资源文件内容</h3>\n<p>目前我们管理资源文件的方式是在 /locales 文件夹下(当然，你放在哪里都可以)：</p>\n<pre><code>.\n├── en.json\n├── zh.json\n</code></pre>\n<p>*.json 是我们的资源文件，返回的是一个对象，key 为我们翻译用的 id，value 为具体语言的翻译，内容是：</p>\n<pre><code class=\"language-json\">{\n  \"sendVerifyCode\": \"Resend verify code after {count} seconds\",\n  \"resendVerifyCode\": \"Resend\",\n  \"page404.message\": \"Not Found\",\n  \"page404.return home\": \"Return To Home\",\n  \"page500.message\": \"Server error, please try again.\"\n}\n</code></pre>\n<h3>需要安装的插件</h3>\n<pre><code class=\"language-bash\">npm install react-intl --save\n\nnpm install atool-l10n babel-plugin-react-intl --save-dev\n</code></pre>\n<p><code>react-intl</code> 国际化组件包</p>\n<p><code>babel-plugin-react-intl</code> 语言包文字提取根据</p>\n<p>在webpack中的基本配置如下：</p>\n<pre><code class=\"language-js\">  \n  // 将语言包文件打包放到指定目录\n  webpackConfig.babel.plugins.push([\n    'react-intl', {\n      messagesDir: './i18n-messages',\n    },\n  ]);\n</code></pre>\n<p><code>atool-l10n</code>  国际化语言资源自动生成</p>\n<p>示例配置</p>\n<pre><code class=\"language-js\">// ./l10n.config.js\nmodule.exports = {\n  \"middlewares\": {\n    \"summary\": [\n      \"summary?sourcePattern=i18n-messages/**/*.json\"\n    ],\n    \"process\": [\n      \"fetchLocal?source=locales,skip\",\n      \"metaToResult?from=defaultMessage,to=zh\",\n      \"youdao?apiname=iamatestmanx,apikey=2137553564\",\n      \"reduce?-autoPick,autoReduce[]=local,autoReduce[]=meta\"\n    ],\n    \"emit\": [\n      \"save?dest=locales\"\n    ]\n  }\n}\n</code></pre>\n<p> 具体配置可参考： <a href=\"https://github.com/ant-tool/atool-l10n\">https://github.com/ant-tool/atool-l10n</a></p>\n<p> 在 <code>package.json</code> script 中加入 <code>\"trans\": \"atool-l10n\"</code> </p>\n<p> 进入开发模式，一般脚手架脚本 <code>npm start</code>，并执行 npm run trans </p>\n<p> 具体生成过程如下：</p>\n<ul>\n<li>自动生成 zh.json，将所有的 defaultMessage 作为中文翻译 value</li>\n<li>自动生成 en.json，默认 value 通过翻译api 获取值，如果 value 你修改过，那  merge 的时候会保留用户修改的值</li>\n<li>如果你删除了部分国际化代码，执行脚本后，相关的 key-value 会从所有的 json 中删除</li>\n<li>翻译后的首字母可能存在大小写的问题，可以用正则查找替换， 查<code>: \"(\\w)</code> 替换 <code>: \"\\u$1</code></li>\n</ul>\n<h3>国际化组件</h3>\n<p>下面组件相当于重构了antd 国际化组件 <a href=\"https://ant.design/docs/react/i18n-cn\">LocaleProvider</a>。\n如果不使用用antd ,去掉组件中的antd 文件即可。\n网站语言切换方式，在redux中 <code>global.locale</code>控制，目前只有中英文，其它语言自行添加</p>\n<pre><code class=\"language-js\">import React from 'react';\nimport { connect } from 'dva';\nimport { LocaleProvider } from 'antd';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport localeDataZh from 'react-intl/locale-data/zh';\nimport localeDataEn from 'react-intl/locale-data/en';\nimport enUs from 'antd/lib/locale-provider/en_US';\nimport zhCn from 'antd/lib/locale-provider/zh_CN';\n\n// 业务语言文件\nimport zhMessages from '../../../locales/zh.json';\nimport enMessages from '../../../locales/en.json';\n\nconst localeDate = {\n  zh: { messages: { ...zhMessages }, data: localeDataZh, locale: 'zh', antd: zhCn },\n  en: { messages: { ...enMessages }, data: localeDataEn, locale: 'en', antd: enUs },\n};\nconst cache = {};\nconst onceAddLocaleData = type => cache[type] || (cache[type] = addLocaleData(localeDate[type].data));\n\nfunction mapStateToProps(state) {\n  const locale = state.global.locale || 'en'; // 选择语言默认用英文\n  onceAddLocaleData(locale); // 加载react-intl 核心语言文件\n  return { messages: localeDate[locale].messages, locale: localeDate[locale].locale };\n}\n\nconst I18nWithAntd = props => {\n  return (\n    &#x3C;IntlProvider {...props}>\n      &#x3C;LocaleProvider locale={localeDate[props.locale].antd}>\n        {props.children}\n      &#x3C;/LocaleProvider>\n    &#x3C;/IntlProvider>\n  );\n};\nexport default connect(mapStateToProps)(I18nWithAntd);\n</code></pre>","frontmatter":{"title":"antd-antd-mobile 国际化方案"}}},"pageContext":{"slug":"/notes/antd-antd-mobile 国际化方案/","tagPath":"/React/antd-antd-mobile 国际化方案/"}}