{"data":{"markdownRemark":{"html":"<h1>eslint 和 prettier 格式化代码的问题</h1>\n<p><code>eslint</code> 负责代码规则校验，<code>prettier</code> 调整代码风格</p>\n<h2>解决办法</h2>\n<ul>\n<li>使用 <code>editorconfig</code> 协助兼容开发工具的代码格式化</li>\n<li>使用 <code>eslint</code> 检查代码</li>\n<li>使用 <code>prettier</code> 格式化代码</li>\n</ul>\n<h2>操作步骤</h2>\n<ol>\n<li>安装 eslint 和 prettier （node 模块）</li>\n<li>安装 eslint 和 prettier （ ide 编辑器的插件 ，webstorm 2018.1后自带）</li>\n<li>配置 eslint 和 prettier</li>\n<li>配置 editorconfig （可选）</li>\n</ol>\n<h3>安装 eslint 和 prettier （node 模块）</h3>\n<pre><code class=\"language-bash\"># 这里需要全局安装最主要的两个node 模块，主要是要让 ide 编辑器能够读取全局环境来调用这2个模块\nnpm install eslint prettier -g --save-dev\n\n# 这个是为了 eslint 跟 prettier 可以联合使用\nnpm install --save-dev eslint-plugin-prettier\n# 这个是为了让 eslint 跟 prettier 兼容，关闭 prettier 跟 eslint 冲突的rules\nnpm install --save-dev eslint-config-prettier\n\n# 可选的部分插件\nnpm -g install babel-eslint eslint-plugin-html --save-dev\n</code></pre>\n<p><code>eslint-config-prettier</code> </p>\n<p>这个插件是如果 eslint 的规则和 prettier 的规则发生冲突的时候（主要是不必要的冲突），例如 eslint 限制了必须单引号，prettier 也限制了必须单引号，那么如果用 eslint 驱动 prettier 来做代码检查的话，就会提示 2 种报错，虽然他们都指向同一种代码错误，这个时候就会由这个插件来关闭掉额外的报错。</p>\n<p>官方详细介绍：GitHub - prettier/eslint-config-prettier: Turns off all rules that are unnecessary or might conflict with Prettier.</p>\n<p><code>babel-eslint</code></p>\n<p>有些代码是没被 eslint 支持的（因为 babel 也是负责这种事情，转译不被支持的 js 语法），所以需要加上这个插件来保持兼容性。</p>\n<p><code>eslint-plugin-htm</code></p>\n<p>为了让 eslint 可以检查.vue文件的代码。</p>\n<h3>设置模块</h3>\n<p>在 webstorm 的 setting 中搜索 prettier 并添加 对应的模块路径。</p>\n<h2>配置 eslint 插件和 prettier 插件</h2>\n<p><strong>eslint 的配置</strong></p>\n<p><code>eslint</code> 的检查规则是通过配置文件<code>.eslintrc</code> 实现的</p>\n<blockquote>\n<p><a href=\"https://github.com/AlloyTeam/eslint-config-alloy\">https://github.com/AlloyTeam/eslint-config-alloy</a></p>\n</blockquote>\n<p><code>.eslintrc</code> 配置文件需要添加修改地方，主要是为了 <code>prettier</code> 插件和 <code>eslint-config-prettier</code> 插件和 <code>eslint-plugin-prettier</code> 插件使用的：</p>\n<pre><code class=\"language-js\">// 因为使用了 eslint 和 prettier，所以要加上他们\nextends: [ 'eslint:recommended', 'plugin:prettier/recommended'],\n\n// required to lint *.vue files 使用 html参数\nplugins: ['html', 'prettier'],\n\n// rules 规则就按照各家写法。\n</code></pre>\n<p><strong>prettier 的配置</strong></p>\n<p>prettier 的检查规则是通过配置文件<code>.prettierrc</code> 实现的，不过一般来说，只需要配置少部分规则即可</p>\n<pre><code class=\"language-json\">{\n  \"printWidth\": 100,\n  \"singleQuote\": true,\n  \"semi\": true\n}\n</code></pre>\n<p>有可能会出现的情况是，prettier 格式化后，全部加了分号，但是 eslint 又要去掉分号，那么就会重复了，这里可以简单地设置 prettier 的分号设置跟 eslint 保持一致，其他如此类推，但只适用在几个比较特别的地方</p>\n<p><strong>配置 editorconfig</strong></p>\n<pre><code>// 放在项目根目录的.editorconfig文件\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n</code></pre>\n<h2>webstorm 中的快捷设置</h2>\n<p>利用webstorm中的 macro 功能，将保存替换为，<code>保存</code>并使用<code>Prettier</code>格式化代码。</p>\n<ol>\n<li><code>Edit</code>-> <code>Marcos</code> -> <code>Start Macro Recording\"</code></li>\n<li><code>右键</code> -> <code>Reformat with Prettier</code> -> <code>File</code> -> <code>Save All</code></li>\n<li><code>Edit</code>-> <code>Marcos</code> -> <code>Stop Macro Recording\"</code> -> <code>Set macro name</code></li>\n<li><code>File</code> -> <code>Setting</code> -> <code>Keymap</code>-> <code>select macro</code>-> <code>Set key is \"command + s\"</code></li>\n</ol>\n<h2>美化项目文件</h2>\n<pre><code class=\"language-bash\">prettier --write \"**/*.js\"\n</code></pre>\n<blockquote>\n<p>参考 <a href=\"https://www.godblessyuan.com/2018/06/%E6%9B%B4%E6%96%B0%E7%89%88-%E6%A2%B3%E7%90%86%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8eslint%E5%92%8Cprettier%E6%9D%A5%E6%A3%80%E6%9F%A5%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98.html\">地址</a></p>\n</blockquote>","frontmatter":{"title":"eslint 和 prettier 格式化代码的问题"}}},"pageContext":{"slug":"/notes/eslint 和 prettier 格式化代码的问题/","tagPath":"/Tools/eslint 和 prettier 格式化代码的问题/"}}