{"data":{"markdownRemark":{"html":"<h1>函数</h1>\n<h2>有名函数和匿名函数</h2>\n<p>匿名函数的 <code>myAdd</code>是通过赋值操作类型推断（Type Inference）出来的</p>\n<pre><code class=\"language-js\">//有名函数\nfunction add(x:number,y:number):number {\n  return x + y\n}\n\n//匿名函数\nlet myAdd = function(x:number,y:number):number {\n  return x + y\n}\n</code></pre>\n<h2>函数类型</h2>\n<p><code>参数类型</code> 和 <code>返回值类型</code>\n函数类型定义中用 <code>=></code>来表示，左边是<code>参数类型</code>需用括号包裹，右边是<code>返回值类型</code>，\n<em>与ES6中的箭头函数不一样</em>。</p>\n<pre><code class=\"language-js\">let myAdd: (x:number,y:number) => number = \nfunction(x: number,y:number):number { return x + y}\n</code></pre>\n<h2>函数参数声明</h2>\n<p><code>Typescript</code>中每个参数都是必选的，参数的个数必须与期望的一致。</p>\n<h3>必选参数</h3>\n<pre><code class=\"language-js\">function buildName(firstName:string,lastName:string) {\n  return firstName + \" \" + lastName\n}\nlet result0 = buildName(12, 12);             //提示 12 类型的参数不能赋值给 string\nlet result1 = buildName('rock')               //提示应该有两个参数，但是只获得一个\nlet result2 = buildName('rock','wong','sr')  //提示应该有两个参数，但是只获得三个\nlet result3 = buildName(\"rock\", \"wong\");     //参数和传入的参数一样，不提示\n</code></pre>\n<h3>可选参数</h3>\n<p>实现参数可选功能，需在参数名后加 <code>?</code>，且可选参数必须在所有参数的后面</p>\n<pre><code class=\"language-js\">function selectParam(firstName:string,lastName?:string) {\n  return firstName + \" \" + lastName\n}\nlet selectParam1 = selectParam('rock') // rock undifined\nlet selectParam2 = selectParam('rock','wong') // rock wong\n</code></pre>\n<h3>默认参数</h3>\n<p>实现参数可选功能，需在参数名后加 <code>?</code>，且可选参数必须在所有参数的后面,该参数的类型为默认值的类型。</p>\n<pre><code class=\"language-js\">function selectParam(firstName:string,lastName='wong') {\n  return firstName + \" \" + lastName\n}\nlet selectParam1 = selectParam('rock')           // rock wong\nlet selectParam2 = selectParam('rock',undefined) // rock wong\nlet selectParam3 = selectParam('rock', null)     // 参数类型错误      \n</code></pre>\n<h3>剩余参数</h3>\n<p>不知道有多少个参数，可以用 <code>...</code> 来操作剩余参数。</p>\n<pre><code class=\"language-js\">function selectParam(firstName:string,...resetName:string[]) {\n  return firstName + \" \" + resetName.join(' ')\n}\nlet selectParam1 = selectParam('rock')                  // rock\nlet selectParam2 = selectParam('rock',undefined,'wong') // rock  wong\nlet selectParam3 = selectParam('rock', 'sr','wong')     // rock sr wong     \n</code></pre>\n<h2>this 和 箭头函数</h2>\n<p><code>JavaScript</code> 中 <code>this</code> 在函数被调用时指定。<code>TypeScript</code> 中创建时指定。</p>\n<pre><code class=\"language-js\">interface Card {\n  suit: string;\n  card: number;\n}\ninterface Deck {\n  suits: string[];\n  cards: number[];\n  createCardPicker(this:Deck):()=>Card;     //this 指向 Deck\n}\nlet deck:Deck = {\n  suits:['suit0','suit1','suit2'],\n  cards:Array(52),\n  createCardPicker(){\n    return () => {\n      let picked = Math.floor(Math.random()*3);\n      return { suit: this.suits[picked],card:picked}\n    }\n  }\n} \nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\nalert(\"card: \" + pickedCard.card + \" and \" + pickedCard.suit);\n</code></pre>","frontmatter":{"title":"函数"}}},"pageContext":{"slug":"/notes/函数/","tagPath":"/Typescript/函数/"}}