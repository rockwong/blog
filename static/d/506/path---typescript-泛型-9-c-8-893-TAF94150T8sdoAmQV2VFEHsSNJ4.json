{"data":{"markdownRemark":{"html":"<h1>泛型</h1>\n<p>泛型是一种特殊的变量，只用于表示类型而不是值</p>\n<h2>泛型函数</h2>\n<p>类型参数<code>T</code>(可定义为任意变量名)在函数参数的前面</p>\n<pre><code class=\"language-ts\">function identity&#x3C;T>(arg:T):T {\n  return arg;\n}\nlet output = identity&#x3C;string>(\"myString\")\n\nlet myIdentity:&#x3C;T>(arg:T) => T = identity\nlet myIdentity1:{ &#x3C;T>(arg:T):T} = identity\n</code></pre>\n<h2>泛型接口</h2>\n<pre><code class=\"language-ts\">interface GenericIdentityFn {\n  &#x3C;T>(arg:T):T\n}\nfunction identity&#x3C;T>(arg:T):T {\n  return arg\n}\nlet myIdentity:GenericIdentityFn = identity\n</code></pre>\n<h2>泛型类</h2>\n<p>泛型类看上去与泛型接口差不多。 泛型类使用（<code>&#x3C;></code>）括起泛型类型，跟在类名后面。</p>\n<pre><code class=\"language-ts\">class GenericNumber&#x3C;T> {\n    zeroValue: T;\n    add: (x: T, y: T) => T;\n}\n\nlet myGenericNumber = new GenericNumber&#x3C;number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };\n</code></pre>\n<p>类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型(因为实例中不继承静态属性)。</p>\n<h2>泛型约束</h2>\n<p><code>extends</code> 继承了一个接口进而对<code>泛型的数据结构</code>进行了限制</p>\n<pre><code class=\"language-ts\">// 限制函数去处理任意带有.length属性的所有类型\ninterface Lengthwise {\n  length:number\n}\nfunction loggingIdentity&#x3C;T extends Lengthwise>(arg:T):T {\n  console.log(arg.length)\n  return arg\n}\n</code></pre>","frontmatter":{"title":"泛型"}}},"pageContext":{"slug":"/notes/泛型/","tagPath":"/Typescript/泛型/"}}