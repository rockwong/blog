{"data":{"markdownRemark":{"html":"<h1>React-DnD 拖拽组件的使用</h1>\n<h2>基本用法</h2>\n<ol>\n<li>把应用的根组件包装在 <code>DragDropContext</code> 中</li>\n<li>把可以拖拽的组件包装在 <code>DragSource</code> 中</li>\n<li>设置 type</li>\n<li>设置 spec，让组件可以响应拖拽事件</li>\n<li>设置 collect，把拖拽过程中需要信息注入组件的 props</li>\n<li>把可以接受拖拽的组件包装在 <code>DropTarget</code> 中</li>\n<li>设置 type</li>\n<li>设置 spec，让组件可以响应拖拽事件</li>\n<li>设置 collect，把拖拽过程中需要信息注入组件的 props</li>\n<li>完</li>\n</ol>\n<p>翻译成代码就是：</p>\n<pre><code class=\"language-js\">// 1\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { DragDropContext } from 'react-dnd';\n\nclass App { ... }\nexport default DragDropContext(HTML5Backend)(App);\n\n/*---------------------------*/\n\n// 2\nimport { DragSource } from 'react-dnd';\n\nclass MyComponent { ... }\nexport default DragSource(type, spec, collect)(MyComponent);\n\n/*---------------------------*/\n\n// 3\nimport { DropTarget } from 'react-dnd';\n\nclass MyComponent2 { ... }\nexport default DropTarget(types, spec, collect)(MyComponent2);\n</code></pre>\n<p>这样，MyComponent 就变得可以拖拽，而 MyComponent2 就变得可以接受拖拽了，但这并不代表 MyComponent 可以放到 MyComponent2 中！</p>\n<h2>一些概念</h2>\n<p>React DnD 中有一些特殊的概念，理解这些概念之后才能活用这个库！</p>\n<ul>\n<li><code>Backend</code> 实现 DnD 的方式，默认是用 HTML5 DnD API，它不能在触屏环境下工作，而且在 IE 下可定制性比其他浏览器弱。你也可以用自己实现，具体请看官方文档。</li>\n<li><code>Items</code> 拖拽数据的表现形式，用 Object 来表示。譬如，要拖拽一张卡片，那这张卡片的<strong>数据</strong>的表现形式可能是 <code>{ id: xxx, content: yyy }</code>。</li>\n<li><code>Types</code> 表示拖/放组件的兼容性，<code>DragSource</code> 和 <code>DropTarget</code> 必须指定 <code>type</code>。只有在 <code>type</code> 相同的情况下，<code>DragSource</code> 才能放到 <code>DropTarget</code> 中。</li>\n<li><code>Monitors</code> 用来响应拖拽事件，可以用来更新组件的的状态。</li>\n<li><code>Connectors</code> 底层接触 DOM 的东西，用来封装你的组件，让你的组件有拖拽的特性。一般在 collect 方法中指定，然后注入到组件的 props 中，最后 render 方法中包装你自己的组件。</li>\n<li><code>DragSource &#x26;&#x26; DropTarget</code> 把上面的概念都绑在一起的东西，也是真正跟你的组件打交道的东西。</li>\n</ul>\n<h2>主要 API 介绍</h2>\n<p>这些主要 API 都是通过包装你的组件，然后返回一个新的组件。</p>\n<h3>DragDropContext(backend)</h3>\n<ul>\n<li><code>backend</code> 实现 DnD 的方式，一般是 HTML5Backend</li>\n</ul>\n<pre><code class=\"language-js\">export default DragDropContext(HTML5Backend)(App);\n</code></pre>\n<hr>\n<h3>DragSource(type, spec, collect)</h3>\n<h3>DropTarget(type, spec, collect)</h3>\n<ul>\n<li><code>type</code> 必须。type 是自定义的，可以是 string，symbol，也可以是用一个函数来返回该组件的其他 props。该组件只能放到相同 type 的 DropTarget 中。</li>\n<li><code>spec</code> 必须。一个带有特定方法的纯 Object，里面是一些响应拖拽事件的方法。</li>\n<li><code>collect</code> 必须。一个函数返回一个 Object，这个 Object 会注入到组件的 props 中。</li>\n<li><code>options</code> 可选。除非有性能问题，否则不需要关心这个参数。</li>\n</ul>\n<pre><code class=\"language-js\">const type = 'xxx';\nconst spec = { ... };\nfunction collect(connect, monitor) { ... }\n\nexport default DragSource(type, spec, collect)(MyComponent);\nexport default DropTarget(type, spec, collect)(MyComponent2);\n</code></pre>\n<hr>\n<h3>DragSource#spec</h3>\n<p>让你的组件响应 dnd 相关事件，支持以下方法：</p>\n<ul>\n<li><code>beginDrag(props, monitor, component)</code> <strong>必须</strong></li>\n<li><code>endDrag(props, monitor, component)</code> 可选</li>\n<li><code>canDrag(props, monitor)</code> 可选</li>\n<li><code>isDragging(props, monitor)</code> 可选</li>\n</ul>\n<p>参数含义如下：</p>\n<ul>\n<li><code>props</code> 组件当前的 props</li>\n<li><code>monitor</code> 是一个 <code>DragSourceMonitor</code> 实例，用来查询当前 drag state 的信息。</li>\n<li><code>component</code> 表示当前组件，可以省略。</li>\n</ul>\n<pre><code class=\"language-js\">const spec = {\n    beginDrag(props) {\n        return { \n            id: props.id, \n            content: props.content\n        }\n    }\n    //...\n}\n</code></pre>\n<hr>\n<h3>DropTarget#spec</h3>\n<p>让你的组件响应 dnd 相关事件，支持以下方法：</p>\n<ul>\n<li><code>drop(props, monitor, component)</code> 可选，响应 drop 事件</li>\n<li><code>hover(props, monitor, component)</code> 可选</li>\n<li><code>canDrop(props, monitor)</code> 可选</li>\n</ul>\n<p>参数含义如下：</p>\n<ul>\n<li><code>props</code> 组件当前的 props</li>\n<li><code>monitor</code> 是一个 <code>DropTargetMonitor</code> 实例，用来查询当前 drag state 的信息。</li>\n<li><code>component</code> 表示当前组件，可以省略。</li>\n</ul>\n<pre><code class=\"language-js\">const spec = {\n    drop(props, monitor, component) {\n        // 获取正在拖放的数据\n        const item = monitor.getItem();\n        // 更新组件状态\n        component.setState({\n            item\n        })\n        \n    }\n}\n</code></pre>\n<hr>\n<h3>DragSource#collect(connect, monitor)</h3>\n<h3>DropTarget#collect(connect, monitor)</h3>\n<p>返回一个 object，这个 object 可以会注入到组件的 props 中。</p>\n<ul>\n<li><code>connect</code> 一个 <code>DragSourceConnector</code>/<code>DropTargetConnector</code> 实例，可以用 <code>connect.dragSource()</code>/<code>connect.dropTarget()</code> 来封装我们的组件。</li>\n<li><code>monitor</code> 一个 <code>DragSourceMonitor</code>/<code>DropTargetMonitor</code> 实例，用来查询当前拖拽的信息。</li>\n</ul>\n<pre><code class=\"language-js\">function collect(connect, monitor) {\n    return {\n        isDragging: monitor.isDragging(),\n        connectDragSource: connect.dragSource()\n    }\n}\n\nclass MyComponent extends Component {\n    render() {\n        // 可以访问 collect 中返回的  object\n        const { isDragging, connectDragSource } = this.props;\n        // 需要用 connect.dragSource()/connect.dropTarget() 封装自己的组件\n        return connectDragSource(\n            &#x3C;div>123&#x3C;/div>\n        )\n    }\n}\n</code></pre>\n<h2>具体例子</h2>\n<ul>\n<li><a href=\"http://gaearon.github.io/react-dnd/examples-chessboard-tutorial-app.html\">演示</a></li>\n<li><a href=\"https://github.com/gaearon/react-dnd/tree/master/examples\">代码</a></li>\n</ul>\n<h2>参考资料</h2>\n<p><a href=\"http://gaearon.github.io/react-dnd/\">官方文档</a></p>","frontmatter":{"title":"React-DnD 拖拽组件的使用"}}},"pageContext":{"slug":"/notes/React-DnD 拖拽组件的使用/","tagPath":"/React/React-DnD 拖拽组件的使用/"}}