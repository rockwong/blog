{"data":{"markdownRemark":{"html":"<h1>代码测试Mocha</h1>\n<h2>示例代码</h2>\n<p><strong>add.js</strong></p>\n<pre><code class=\"language-js\">// add.js\nfunction add(x, y) {\n  return x + y;\n}\n\nmodule.exports = add;\n</code></pre>\n<p><strong>add.test.js</strong></p>\n<pre><code class=\"language-js\">// add.test.js\nvar add = require('./add.js');\nvar expect = require('chai').expect;\n\ndescribe('加法函数的测试', function() {\n  it('1 加 1 应该等于 2', function() {\n    expect(add(1, 1)).to.be.equal(2);\n  });\n});\n</code></pre>\n<h2>命令</h2>\n<p><strong>--recursive</strong>\n子目录下面所有的测试用例</p>\n<p><strong>--growl, -G</strong>\n打开--growl参数，就会将测试结果在桌面通知显示。</p>\n<p><strong>--watch，-w</strong>\n--watch参数用来监视指定的测试脚本。只要测试脚本有变化，就会自动运行Mocha。</p>\n<p><strong>--bail, -b</strong>\n--bail参数指定只要有一个测试用例没有通过，就停止执行后面的测试用例。这对持续集成很有用。</p>\n<p><strong>--grep, -g</strong>\n--grep参数用于搜索测试用例的名称（即it块的第一个参数），然后只执行匹配的测试用例。</p>\n<pre><code class=\"language-bash\">$ mocha --grep \"1 加 1\"\n</code></pre>\n<p><strong>--invert, -i</strong>\n--invert参数表示只运行不符合条件的测试脚本，必须与--grep参数配合使用。</p>\n<pre><code class=\"language-bash\">$ mocha --grep \"1 加 1\" --invert\n</code></pre>\n<h2>配置文件mocha.opts</h2>\n<p>Mocha允许在test目录下面，放置配置文件mocha.opts，把命令行参数写在里面</p>\n<pre><code class=\"language-bash\">    $ mocha --recursive --reporter tap --growl\n</code></pre>\n<p><code>test</code> 目录下的 <code>mocha.opts</code></p>\n<pre><code>--reporter tap\n--recursive\n--growl\n</code></pre>","frontmatter":{"title":"代码测试Mocha"}}},"pageContext":{"slug":"/notes/代码测试Mocha/","tagPath":"/Javascript/代码测试Mocha/"}}