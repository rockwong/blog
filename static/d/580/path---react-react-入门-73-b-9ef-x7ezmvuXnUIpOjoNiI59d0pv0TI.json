{"data":{"markdownRemark":{"html":"<h1>React 入门</h1>\n<blockquote>\n<p>参考 <a href=\"http://www.ruanyifeng.com/blog/2015/03/react\">http://www.ruanyifeng.com/blog/2015/03/react</a> </p>\n</blockquote>\n<h2>ReactDOM.render()</h2>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;h1>Hello world&#x3C;/h1>,document.getElementById('demo'));\n</code></pre>\n<h2>JSX</h2>\n<p>以 <code>&#x3C;</code> 开头就用HTML规则解析, 以 <code>{</code> 开头就用JavaScript解析</p>\n<pre><code class=\"language-js\">var names = ['Alice', 'Emily', 'Kate'];\n\nReactDOM.render(\n  &#x3C;div>\n  {\n    names.map(function (name) {\n      return &#x3C;div>Hello, {name}!&#x3C;/div>\n    })\n  }\n  &#x3C;/div>,\n  document.getElementById('example')\n);\n</code></pre>\n<p>如果这个变量是一个数组，则会展开这个数组的所有成员.</p>\n<pre><code class=\"language-js\">var arr = [\n  &#x3C;h1>Hello world!&#x3C;/h1>,\n  &#x3C;h2>React is awesome&#x3C;/h2>,\n];\nReactDOM.render(\n  &#x3C;div>{arr}&#x3C;/div>,\n  document.getElementById('example')\n);\n</code></pre>\n<h2>组件</h2>\n<p>组件类名称第一个字母必须大写,只能包含一个顶层标签\n用法与HTML标签一致,可以加入属性,属性值在组件内用<code>this.props</code>获取.</p>\n<p>因<code>class</code>,<code>for</code>是JavaScript的保留字:\n<code>class</code>-><code>className</code>\n<code>for</code>-> <code>htmlFor</code></p>\n<pre><code class=\"language-js\">var HelloMessage = React.createClass({\n  render: function() {\n    return &#x3C;h1>Hello {this.props.name}&#x3C;/h1>;\n  }\n});\n\nReactDOM.render(\n  &#x3C;HelloMessage name=\"John\" />,\n  document.getElementById('example')\n);\n</code></pre>\n<h3>无状态函数</h3>\n<pre><code class=\"language-js\">function Button({ color = 'blue', text = 'http://jartto.wang'}) {\n    return (\n        &#x3C;button className = {`btn btn-${color}`}>\n            &#x3C;em>{text}&#x3C;/em>\n        &#x3C;/button>\n    )\n}\n</code></pre>\n<p>无状态组件只传入 props 和 context 两个参数。也就是说，它不存在 state，也没有生命周期方法，组件本身即上面两种 React 组件构建方法中的 render 方法。不过，像 propType 和 defaultProps 还是可以通过向方法设置静态属性来实现。\n组件不能访问 this 对象</p>\n<h3>组件计时器</h3>\n<pre><code class=\"language-js\">class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n  tick() {\n    this.setState((prevState) => ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return (\n      &#x3C;div>Seconds Elapsed: {this.state.secondsElapsed}&#x3C;/div>\n    );\n  }\n}\nReactDOM.render(&#x3C;Timer />, mountNode);\n</code></pre>\n<h3>纯组件 Pure Component</h3>\n<h2>this.props.children</h2>\n<p><code>this.props.children</code> 属性。它表示组件的所有子节点</p>\n<pre><code class=\"language-js\">var NotesList = React.createClass({\n  render: function() {\n    return (\n      &#x3C;ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return &#x3C;li>{child}&#x3C;/li>;\n        })\n      }\n      &#x3C;/ol>\n    );\n  }\n});\n\nReactDOM.render(\n  &#x3C;NotesList>\n    &#x3C;span>hello&#x3C;/span>\n    &#x3C;span>world&#x3C;/span>\n  &#x3C;/NotesList>,\n  document.body\n);\n</code></pre>\n<h2>PropTypes</h2>\n<p>验证组件实例的属性是否符合要求\n<code>getDefaultProps</code> 方法可以用来设置组件属性的默认值.</p>\n<pre><code class=\"language-js\">var MyTitle = React.createClass({\n  propTypes: {\n    title: React.PropTypes.string.isRequired,\n  },\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n  render: function() {\n     return &#x3C;h1> {this.props.title} &#x3C;/h1>;\n   }\n});\n</code></pre>\n<h2>获取真实的DOM节点</h2>\n<p>从组件获取真实 DOM 的节点，要用到 <code>ref</code> 属性,然后 <code>this.refs.[refName]</code> 就会返回这个真实的 DOM 节点.\nReact 组件支持很多事件，除了 <code>Click</code> 事件以外，还有 <code>KeyDown</code> 、<code>Copy</code>、<code>Scroll</code> 等</p>\n<pre><code class=\"language-js\">var MyComponent = React.createClass({\n  handleClick: function() {\n    this.refs.myTextInput.focus();\n  },\n  render: function() {\n    return (\n      &#x3C;div>\n        &#x3C;input type=\"text\" ref=\"myTextInput\" />\n        &#x3C;input type=\"button\" value=\"Focus the text input\" onClick={this.handleClick} />\n      &#x3C;/div>\n    );\n  }\n});\n\nReactDOM.render(\n  &#x3C;MyComponent />,\n  document.getElementById('example')\n);\n</code></pre>\n<h2>this.state</h2>\n<p><code>getInitialState</code>  方法用于定义初始状态.\n<code>this.state</code> 属性读取.\n<code>this.setState</code> 方法就修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。\n表单的元素值需要定义一个事件的回调函数,通过<code>event.target.value</code>读取输入的值.</p>\n<pre><code class=\"language-js\">var LikeButton = React.createClass({\n  getInitialState: function() {\n    return {liked: false};\n  },\n  handleClick: function(event) {\n    this.setState({liked: !this.state.liked});\n  },\n  render: function() {\n    var text = this.state.liked ? 'like' : 'haven\\'t liked';\n    return (\n      &#x3C;p onClick={this.handleClick}>\n        You {text} this. Click to toggle.\n      &#x3C;/p>\n    );\n  }\n});\n\nReactDOM.render(\n  &#x3C;LikeButton />,\n  document.getElementById('example')\n);\n</code></pre>\n<h2>组件生命周期</h2>\n<p>组件的生命周期分三个状态:\n<code>Mounting</code> : 已插入真实 DOM\n<code>Updating</code> : 正在被重新渲染\n<code>Unmounting</code> :已移出真实 DOM</p>\n<p>每个状态都有两种处理函数,<code>will</code> 在进入状态之前调用,<code>did</code>在进入状态之后调用.</p>\n<pre><code>componentWillMount()\ncomponentDidMount()\ncomponentWillUpdate(object nextProps, object nextState)\ncomponentDidUpdate(object prevProps, object prevState)\ncomponentWillUnmount()\n</code></pre>\n<p>此外还提供两种特殊状态的处理函数.</p>\n<pre><code>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\nshouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n</code></pre>\n<pre><code class=\"language-js\">var Hello = React.createClass({\n  getInitialState: function () {\n    return {\n      opacity: 1.0\n    };\n  },\n\n  componentDidMount: function () {\n    this.timer = setInterval(function () {\n      var opacity = this.state.opacity;\n      opacity -= .05;\n      if (opacity &#x3C; 0.1) {\n        opacity = 1.0;\n      }\n      this.setState({\n        opacity: opacity\n      });\n    }.bind(this), 100);\n  },\n\n  render: function () {\n    return (\n      &#x3C;div style={{opacity: this.state.opacity}}>\n        Hello {this.props.name}\n      &#x3C;/div>\n    );\n  }\n});\n\nReactDOM.render(\n  &#x3C;Hello name=\"world\"/>,\n  document.body\n);\n</code></pre>","frontmatter":{"title":"React 入门"}}},"pageContext":{"slug":"/notes/React 入门/","tagPath":"/React/React 入门/"}}