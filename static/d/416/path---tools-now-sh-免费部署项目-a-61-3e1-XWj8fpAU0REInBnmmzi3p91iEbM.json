{"data":{"markdownRemark":{"html":"<h1>Now.sh 免费部署项目</h1>\n<h2>about</h2>\n<p>ZEIT是美国一家提供云部署服务的公司，旗下的 Now.sh提供了Realtime global deployments(全球化实时部署)服务。</p>\n<h2>免费的 OSS 服务</h2>\n<table>\n<thead>\n<tr>\n<th align=\"right\">名称</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">带宽</td>\n<td>1GB*</td>\n</tr>\n<tr>\n<td align=\"right\">日志</td>\n<td>100MB*</td>\n</tr>\n<tr>\n<td align=\"right\">部署</td>\n<td>∞</td>\n</tr>\n<tr>\n<td align=\"right\">并发实例</td>\n<td>3</td>\n</tr>\n<tr>\n<td align=\"right\">CDN 域名</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td align=\"right\">域</td>\n<td>∞</td>\n</tr>\n<tr>\n<td align=\"right\">MAX文件大小/存储空间</td>\n<td>5MB / 1GB</td>\n</tr>\n<tr>\n<td align=\"right\">自动增长支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td align=\"right\">团队协作人数</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<h2>使用步骤</h2>\n<pre><code class=\"language-bash\"># 安装\nnpm install -g now\n\n#登录,需在邮件中确认\nnow login\n</code></pre>\n<h2>部署</h2>\n<p><code>static</code></p>\n<pre><code class=\"language-bash\"> projectdir/ now\n</code></pre>\n<p><code>Node.js 部署</code></p>\n<p>部署命令与静态资源一样，但应用程序目录中有一个package.json文件，那么Now.sh会认为有效的Node.js部署。这是一个简单的Node.js部署在微服务</p>\n<p>Node.js 应用必须要用以下两个文件才能被 Now.sh 识别。</p>\n<p>示例代码：index.js</p>\n<pre><code class=\"language-js\">module.exports = () => ({\n  date: new Date\n})\n</code></pre>\n<p>示例代码：package.json</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"get-started-node\",\n  \"version\": \"0.1.0\",\n  \"dependencies\": {\n    \"micro\": \"latest\"\n  },\n  \"scripts\": {\n    \"start\": \"micro\"\n  }\n}\n</code></pre>\n<p><code>Docker 部署</code></p>\n<p>应用程序目录包含一个Docker文件，那么现在考虑一个有效的Docker部署。它将基于Dockerfile构建一个docker映像，并基于此启动容器。</p>\n<p>部署一个简单的Go HTTP服务器，创建一个目录并添加这两个文件：</p>\n<p>示例代码： hello.go</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"Hello world!\")\n    })\n\n    err := http.ListenAndServe(\":8000\", nil)\n    if err != nil {\n        panic(err)\n    }\n}\n</code></pre>\n<p>示例代码： Dockerfile</p>\n<pre><code>FROM golang:alpine\nADD . /go/src/zeit/hello\nRUN go install zeit/hello\nCMD [\"/go/bin/hello\"]\nEXPOSE 8000\n</code></pre>\n<p><code>部署总结：</code></p>\n<p>项目在部署完成之后，我们会得到一个链接，可以通过这个链接来访问部署的项目。</p>\n<p>每次更新部署后， url 都会生成一个新的，但是老的 url 都还是可以用的。如果最终网站要产品化，可以很容易的绑定自己的域名。</p>\n<h2>Now.sh - 域名</h2>\n<p><code>now.sh提供的域名</code></p>\n<pre><code class=\"language-bash\">#  alias 指定域名\n$ now alias https://my-name.now.sh my-web-app\n\n# 发布当前文件夹项目 并 alias \n$ now alias may-web-app\n</code></pre>\n<p><code>now.sh管理的自定义域名</code></p>\n<ol>\n<li>如果域名解析的DNS 由 now.sh 托管则，直接使用托管域名即可</li>\n<li>如果解析不在now.sh则需要在域名解析商增加 <code>CNAME</code> 记录 值为<code>alias.zeit.co</code>, 然后运行一下命令</li>\n</ol>\n<pre><code class=\"language-bash\">#  alias 指定域名\n$ now alias https://my-web-app-avvuiuuwto.now.sh my-web-app.com\n\n# 发布当前文件夹项目 并 alias \n$ now alias my-web-app.com\n</code></pre>\n<h2>注意事项</h2>\n<p><code>优势：</code></p>\n<ul>\n<li>自带的 https</li>\n<li>真正的一键部署，不用自己管理服务器，将 severless 进行到底</li>\n<li>不翻墙，访问速度很棒</li>\n</ul>\n<p><code>其他</code></p>\n<ul>\n<li>为了节省资源，应用一段时间不用就会被 frozen （冻结），但是只要我们去敲链接去访问，就会自动 unfrozen ，只不过初次访问速度会受影响。</li>\n<li>在 Now.sh提供的免费服务中，您的代码将是公开的和开源的，如果介意可升级账户或放弃使用。</li>\n</ul>","frontmatter":{"title":"Now.sh 免费部署项目"}}},"pageContext":{"slug":"/notes/Now.sh 免费部署项目/","tagPath":"/Tools/Now.sh 免费部署项目/"}}