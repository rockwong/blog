{"data":{"markdownRemark":{"html":"<h1>flex 布局</h1>\n<h2>flex 容器</h2>\n<pre><code class=\"language-css\">.box{\n    display: -webkit-flex; \n    display: flex;\n}\n.inline{\n    display: -webkit-inline-flex;\n    display: inline-flex;\n}\n</code></pre>\n<p><strong>注意</strong>，设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<h2>容器属性</h2>\n<ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h3>flex-direction</h3>\n<p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）。</p>\n<pre><code class=\"language-css\">.box {\n    flex-direction: row | row-reverse | column | column-reverse;\n}\n</code></pre>\n<h3>flex-wrap</h3>\n<p><code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>\n<pre><code class=\"language-css\">.box{\n    flex-wrap: nowrap | wrap | wrap-reverse;\n}\n</code></pre>\n<h3>flex-flow</h3>\n<p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p>\n<pre><code class=\"language-css\">.box {\n    flex-flow: &#x3C;flex-direction> || &#x3C;flex-wrap>;\n}\n</code></pre>\n<h3>justify-content</h3>\n<p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>\n<pre><code class=\"language-css\">.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n</code></pre>\n<h3>align-items</h3>\n<p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>\n<pre><code class=\"language-css\">.box {\n    align-items: flex-start | flex-end | center | baseline | stretch;\n}\n</code></pre>\n<h3>align-content</h3>\n<p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<pre><code class=\"language-css\">.box {\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n</code></pre>\n<h2>项目的属性</h2>\n<ul>\n<li>order</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<h3>order</h3>\n<p><code>order</code>  属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<pre><code class=\"language-css\">.item {\n    order: &#x3C;integer>;\n}\n</code></pre>\n<h3>flex-grow</h3>\n<p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>\n<pre><code class=\"language-css\">.item {\n    flex-grow: &#x3C;number>; /* default 0 */\n}\n</code></pre>\n<h3>flex-shrink</h3>\n<p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为<code>1</code>，即如果空间不足，该项目将缩小。\n如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。\n负值无效</p>\n<pre><code class=\"language-css\">.item {\n    flex-shrink: &#x3C;number>; /* default 1 */\n}\n</code></pre>\n<h3>flex-basis</h3>\n<p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>\n<pre><code class=\"language-css\">.item {\n    flex-basis: &#x3C;length> | auto; /* default auto */\n}\n</code></pre>\n<h3>flex</h3>\n<p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。\n该属性有两个快捷值：auto <code>(1 1 auto)</code>和 none <code>(0 0 auto)</code>。</p>\n<pre><code class=\"language-css\">.item {\n  flex: none | [ &#x3C;'flex-grow'> &#x3C;'flex-shrink'>? || &#x3C;'flex-basis'> ]\n}\n</code></pre>\n<h3>align-self</h3>\n<p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>\n<pre><code class=\"language-css\">.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n</code></pre>","frontmatter":{"title":"flex 布局"}}},"pageContext":{"slug":"/notes/flex 布局/","tagPath":"/HTML-CSS/flex 布局/"}}