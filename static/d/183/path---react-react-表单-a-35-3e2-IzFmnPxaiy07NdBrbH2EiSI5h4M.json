{"data":{"markdownRemark":{"html":"<h1>React 表单</h1>\n<h2>textarea</h2>\n<p>在 HTML 中，textarea 的值是像如下定义的：</p>\n<pre><code class=\"language-html\">&#x3C;textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\">\n    some value\n&#x3C;/textarea>\n</code></pre>\n<p>而在 React 中， TextArea 的使用方式同 input 组件，使用 value 来设置值</p>\n<pre><code class=\"language-js\">var MyComponent = function() {\n    render: function() {\n        return &#x3C;div>\n                    &#x3C;textarea value={...} onChange={...}/>\n                &#x3C;/div>\n    }\n}\n</code></pre>\n<h2>select</h2>\n<p>在 React 中 select 组件支持 value 值，value 值还支持多选</p>\n<pre><code class=\"language-js\">&#x3C;select value=\"B\">\n    &#x3C;option value=\"A\">Apple&#x3C;/option>\n    &#x3C;option value=\"B\">Banana&#x3C;/option>\n    &#x3C;option value=\"C\">Cranberry&#x3C;/option>\n  &#x3C;/select>\n\n  &#x3C;select multiple={true} value={['B', 'C']}>\n    &#x3C;option value=\"A\">Apple&#x3C;/option>\n    &#x3C;option value=\"B\">Banana&#x3C;/option>\n    &#x3C;option value=\"C\">Cranberry&#x3C;/option>\n  &#x3C;/select>\n</code></pre>\n<h2>受控组件</h2>\n<p>表单组件可分为两类，受控与非受控组件，受控组件是包含了 value 值的</p>\n<pre><code class=\"language-js\">render: function() {\n    return &#x3C;input type=\"text\" value=\".....\"/>\n}\n</code></pre>\n<p>为什么叫受控组件？ 因为这个时候用户不能修改 input 的值， input 的值永远是 value 固定了的值。\n如果去掉 value 属性，那么就可以输入值了</p>\n<h2>非受控组件</h2>\n<p>没有 value 值的 input</p>\n<pre><code class=\"language-js\">render: function() {\n    return &#x3C;input type=\"text\"/>\n}\n</code></pre>\n<p>可以通过 defaultValue 属性来设置默认值</p>\n<pre><code class=\"language-js\">render: function() {\n    return &#x3C;input type=\"text\" defaultValue=\"Default Value\">\n}\n</code></pre>\n<p>类似的对于 checkbox 有 defaultChecked 属性</p>\n<blockquote>\n<p>需要注意的是，默认值只适用于第一次渲染，在重渲染阶段将不会适用</p>\n</blockquote>\n<h2>checkbox 和 radio</h2>\n<p>如果在 onChange 事件中调用了 preventDefault ，那么浏览器不会更新 checked 状态，即便事实上组件的值已经 checked 或者 unchecked 了 。</p>\n<p><strong>如何处理 checkbox 呢？</strong></p>\n<ol>\n<li>\n<p>避免调用 ev.preventDefault </p>\n</li>\n<li>\n<p>在 setTimeout 中处理 checked 的修改</p>\n</li>\n<li>\n<p>使用 click 事件</p>\n</li>\n</ol>\n<pre><code class=\"language-js\">var CheckBox = React.createClass({\n    getInitialState: function(){\n        return {\n            checked: false\n        }\n    },\n    render: function() {\n        return  &#x3C;div>\n            &#x3C;input type=\"checkbox\" \n                checked={this.state.checked} \n                onChange={this.onChange}/>\n        &#x3C;/div>\n    },\n    onChange: function(ev) {\n        this.setState({\n            checked: true\n        });\n        ev.preventDefault();\n    }\n})\n</code></pre>","frontmatter":{"title":"React 表单"}}},"pageContext":{"slug":"/notes/React 表单/","tagPath":"/React/React 表单/"}}