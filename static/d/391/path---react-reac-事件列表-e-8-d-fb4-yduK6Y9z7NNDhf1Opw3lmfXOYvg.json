{"data":{"markdownRemark":{"html":"<h1>Reac 事件列表</h1>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000005182270\">https://segmentfault.com/a/1190000005182270</a></p>\n</blockquote>\n<h2>粘贴板事件</h2>\n<p> {\n事件名称：onCopy onCut onPaste\n属性：DOMDataTransfer clipboardData\n}</p>\n<h2>编辑事件</h2>\n<p>{\n事件名称：onCompositionEnd onCompositionStart onCompositionUpdate\n属性：string data\n}</p>\n<h2>键盘事件</h2>\n<p> {\n事件名称：onKeyDown onKeyPress onKeyUp\n属性： {\nboolean altKey\nnumber charCode\nboolean ctrlKey\nboolean getModifierState(key)\nstring key\nnumber keyCode\nstring locale\nnumber location\nboolean metaKey\nboolean repeat\nboolean shiftKey\nnumber which\n}\n}</p>\n<p>// 焦点事件除了表单元素以外，可以应用到所有元素中</p>\n<h2>焦点事件</h2>\n<p> {\n名称：onFocus onBlur\n属性：DOMEventTarget relatedTarget\n}</p>\n<h2>表单事件</h2>\n<p>{\n名称：onChange onInput onSubmit\n}</p>\n<h2>鼠标事件</h2>\n<p> {\n名称：{\nonClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp\n}\n属性：{\nboolean altKey\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nnumber pageX\nnumber pageY\nDOMEventTarget relatedTarget\nnumber screenX\nnumber screenY\nboolean shiftKey\n}\n}</p>\n<h2>选择事件</h2>\n<p>{\n名称：onSelect\n}</p>\n<h2>触摸事件</h2>\n<p> {\n名称：onTouchCancel onTouchEnd onTouchMove onTouchStart\n属性：{\nboolean altKey\nDOMTouchList changedTouches\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nboolean shiftKey\nDOMTouchList targetTouches\nDOMTouchList touches\n}\n}</p>\n<h2>UI 事件</h2>\n<p> {\n名称：onScroll\n属性：{\nnumber detail\nDOMAbstractView view\n}\n}</p>\n<h2>滚轮事件</h2>\n<p> {\n名称：onWheel\n属性：{\nnumber deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ\n}\n}</p>\n<h2>媒体事件</h2>\n<p> {\n名称：{\nonAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting\n}\n}</p>\n<h2>图像事件</h2>\n<p> {\n名称：onLoad onError\n}</p>\n<h2>动画事件</h2>\n<p>{\n名称：onAnimationStart onAnimationEnd onAnimationIteration\n属性：{\nstring animationName\nstring pseudoElement\nfloat elapsedTime\n}\n}</p>\n<h2>渐变事件</h2>\n<p>{\n名称：onTransitionEnd\n属性： {\nstring propertyName\nstring pseudoElement\nfloat elapsedTime\n}\n}</p>\n<h2>onChange 事件</h2>\n<p>和普通 HTML 中的 onChange 事件不同， 在原生组件中，只有 input 元素失去焦点才会触发 onChange 事件， 在 React 中，只要元素的值被修改就会触发 onChange 事件。</p>","frontmatter":{"title":"Reac 事件列表"}}},"pageContext":{"slug":"/notes/Reac 事件列表/","tagPath":"/React/Reac 事件列表/"}}