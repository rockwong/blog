{"data":{"markdownRemark":{"html":"<h1>vue + typescript 采坑</h1>\n<blockquote>\n<p>参考： <a href=\"https://juejin.im/post/5b54886ce51d45198f5c75d7\">https://juejin.im/post/5b54886ce51d45198f5c75d7</a></p>\n</blockquote>\n<h2>require.context 报错</h2>\n<p><code>Property 'context' does not exist on type 'NodeRequire'.</code></p>\n<pre><code class=\"language-bash\"># 安装ts types\nnpm install --save-dev @types/webpack-env\n</code></pre>\n<p>tsconfig.json 配置</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n      \"types\": [\"node\", \"webpack-env\"]\n      }\n  }\n</code></pre>\n<p><code>webpack_require__(...).context is not a function</code> </p>\n<p>检查参数错误，<code>context</code>的参数必须为字面量</p>\n<h2>import alias</h2>\n<p><code>tsconfig.json</code> 和 <code>webpack</code> 中的 <code>alias</code>都需要设置，否则会出现部分问题，\n<code>webstorm</code>中右键 <code>src</code>目录 Mark directory as Resource root,解决编辑器识别路径的问题。</p>\n<ul>\n<li>解决 <code>webstorm</code>  import 时的路径自动完成，并根据项目目录文件自动提示</li>\n<li>解决<code>typescript</code>报引用路径错误问题</li>\n<li>解决编译报错问题 <code>compile with errors: This dependency was not found</code></li>\n<li>点击 <code>improt</code> 方法自动打开文件定位到其位置,方便调试</li>\n<li>在项目路径嵌套过深下引入 <code>src/services</code> 中的文件非常方便，省去冗余的相对路径'../../../'</li>\n</ul>\n<pre><code class=\"language-js\">// 在根目录中的 vue.config.js\nvar path = require(\"path\");\n\nmodule.exports = {\n  configureWebpack: {\n    resolve: {\n      alias: {\n        services: path.resolve(__dirname, \"src/services\")\n      }\n    }\n  }\n};\n</code></pre>\n<p> <code>tsconfig.json</code> 中的路径配置</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"services/*\": [\"src/services/*\"],\n      \"@/*\": [\"src/*\"]\n    }\n  }\n}\n</code></pre>\n<h2>vuex</h2>\n<ol>\n<li>添加<code>modules</code>时开启 <code>namespaced=true</code></li>\n<li>利用<code>vuex-class</code> 里用 namespace 修饰器 快捷访问vuex 中的modues 状态</li>\n</ol>\n<pre><code class=\"language-js\">import { Component, Vue } from \"vue-property-decorator\";\nimport { namespace } from \"vuex-class\";\n@Component\nconst about = namespace(\"about\");\nexport default class Home extends Vue {\n  @about.State\n  message: string;\n}\n</code></pre>\n<h2>vue-class-component</h2>\n<p><code>不要使用箭头函数方法访问 this ,无法正常工作</code></p>\n<p>react 中有插件绑定this,所以正常工作，vue中目前不行</p>\n<pre><code class=\"language-js\">@Component\nclass MyComp extends Vue {\n  foo = 123\n\n  bar = () => {\n    // Does not update the expected property.\n    // `this` value is not a Vue instance in fact.\n    this.foo = 456\n  }\n}\n</code></pre>\n<p><code>undefined</code> 不响应数据变化</p>\n<pre><code class=\"language-js\">@Component\nclass MyComp extends Vue {\n  // Will not be reactive\n  foo = undefined\n\n  // Will be reactive\n  bar = null\n\n  data () {\n    return {\n      // Will be reactive\n      baz: undefined\n    }\n  }\n}\n</code></pre>","frontmatter":{"title":"vue + typescript 采坑"}}},"pageContext":{"slug":"/notes/vue + typescript 采坑/","tagPath":"/Vue/vue + typescript 采坑/"}}