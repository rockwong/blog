{"data":{"markdownRemark":{"html":"<h1>CSS Modules</h1>\n<h2>局部作用域</h2>\n<p><strong>app.js</strong></p>\n<pre><code class=\"language-js\">import React from 'react';\nimport style from './App.css';\n\nexport default () => {\n  return (\n    &#x3C;h1 className={style.title}>\n      Hello World\n    &#x3C;/h1>\n  );\n</code></pre>\n<p><strong>app.css</strong></p>\n<pre><code class=\"language-css\">.title {\n  color: red;\n}\n</code></pre>\n<p><strong>编译后</strong>\n<code>style.title</code>会编译成一个哈希字符串</p>\n<pre><code class=\"language-html\">&#x3C;h1 class=\"_3zyde4l1yATCOkgn-DBWEL\">\n  Hello World\n&#x3C;/h1>\n</code></pre>\n<p><strong>app.css</strong>也会同时被编译</p>\n<pre><code class=\"language-css\">._3zyde4l1yATCOkgn-DBWEL {\n  color: red;\n}\n</code></pre>\n<p>这样一来，这个类名就变成独一无二了，只对App组件有效。</p>\n<h2>全局作用域</h2>\n<p> <code>:global(.className)</code> 声明的<code>class</code>，都不会被编译成哈希字符串。</p>\n<pre><code class=\"language-css\">.title {\n  color: red;\n}\n\n:global(.title) {\n  color: green;\n}\n</code></pre>\n<h2>定制哈希类名</h2>\n<p><code>css-loader</code>默认的哈希算法是<code>[hash:base64]</code>，这会将<code>.title</code>编译成<code>._3zyde4l1yATCOkgn-DBWEL</code>这样的字符串。</p>\n<pre><code class=\"language-js\"> loader: \"style-loader!css-loader?modules&#x26;localIdentName=[path][name]---[local]---[hash:base64:5]\"\n</code></pre>\n<p><code>.title</code> 会编译成 <code>demo03-components-App---title---GpMto</code></p>\n<h2>Class 的组合</h2>\n<p>在<code>App.css</code>中，让<code>.title</code>继承<code>.className</code>。</p>\n<pre><code class=\"language-css\">.className {\n  background-color: blue;\n}\n\n.title {\n  composes: className;\n  color: red;\n}\n</code></pre>\n<p><code>App.js</code>不用修改。</p>\n<p><strong>编译后 app.css</strong></p>\n<pre><code class=\"language-css\">._2DHwuiHWMnKTOYG45T0x34 {\n  color: red;\n}\n\n._10B-buq6_BEOTOl9urIjf8 {\n  background-color: blue;\n}\n</code></pre>\n<p><code>h1</code>的<code>class</code>编译成</p>\n<pre><code class=\"language-html\">&#x3C;h1 class=\"_2DHwuiHWMnKTOYG45T0x34 _10B-buq6_BEOTOl9urIjf8\">\n</code></pre>\n<h2>输入其他模块</h2>\n<p>选择器也可以继承其他CSS文件里面的规则。\n<strong>another.css</strong></p>\n<pre><code class=\"language-css\">.className {\n  background-color: blue;\n}\n</code></pre>\n<p><strong>App.css</strong>可以继承<strong>another.css</strong>里面的规则。</p>\n<pre><code class=\"language-css\">.title {\n  composes: className from './another.css';\n  color: red;\n}\n</code></pre>\n<p><strong>h1</strong>会被解析成</p>\n<pre><code class=\"language-html\">&#x3C;h1 class=\"_1lZdo9TWyz5xJXQ_E_wxKY dMzNGHaIQlEoq_oi9XUMx\">\n</code></pre>\n<h2>输入变量</h2>\n<p>CSS Modules 支持使用变量，不过需要安装 <code>PostCSS</code> 和 <code>postcss-modules-values</code>。\n<code>$ npm install --save postcss-loader postcss-modules-values</code>\n<strong>webpack.config.js</strong></p>\n<pre><code class=\"language-js\">var values = require('postcss-modules-values');\n\nmodule.exports = {\n  entry: __dirname + '/index.js',\n  output: {\n    publicPath: '/',\n    filename: './bundle.js'\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n        query: {\n          presets: ['es2015', 'stage-0', 'react']\n        }\n      },\n      {\n        test: /\\.css$/,\n        loader: \"style-loader!css-loader?modules!postcss-loader\"\n      },\n    ]\n  },\n  postcss: [\n    values\n  ]\n};\n</code></pre>\n<p>在<code>colors.css</code>里面定义变量</p>\n<pre><code class=\"language-css\">@value blue: #0c77f8;\n@value red: #ff0000;\n@value green: #aaf200;\n</code></pre>\n<p><code>App.css</code>可以引用这些变量</p>\n<pre><code class=\"language-css\">@value colors: \"./colors.css\";\n@value blue, red, green from colors;\n\n.title {\n  color: red;\n  background-color: blue;\n}\n</code></pre>","frontmatter":{"title":"CSS Modules"}}},"pageContext":{"slug":"/notes/CSS Modules/","tagPath":"/React/CSS Modules/"}}