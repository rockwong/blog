{"data":{"markdownRemark":{"html":"<h1>RxJS</h1>\n<blockquote>\n<p>参考： <a href=\"http://www.alloyteam.com/2016/12/learn-rxjs/\">http://www.alloyteam.com/2016/12/learn-rxjs/</a></p>\n</blockquote>\n<h3>什么是RxJS</h3>\n<p>RxJS 是 Reactive Extensions for JavaScript 的缩写，起源于 Reactive Extensions，是一个基于可观测数据<code>流</code>在异步编程应用中的库。</p>\n<p><code>流</code>是在时间流逝的过程中产生的一系列事件。它具有时间与事件响应的概念。</p>\n<h3>观察者模式</h3>\n<p>观察者模式在 Web 中最常见的应该是 DOM 事件的监听和触发。</p>\n<p><code>订阅</code>：通过 addEventListener 订阅 document.body 的 click 事件。</p>\n<p><code>发布</code>：当 body 节点被点击时，body 节点便会向订阅者发布这个消息。</p>\n<pre><code class=\"language-js\">document.body.addEventListener('click', function listener(e) {\n    console.log(e);\n},false);\n \ndocument.body.click(); // 模拟用户点击\n</code></pre>\n<h3>迭代器模式</h3>\n<p>迭代器模式可以用 JavaScript 提供了 Iterable Protocol 可迭代协议来表示。Iterable Protocol 不是具体的变量类型，而是一种可实现协议。JavaScript 中像 Array、Set 等都属于内置的可迭代类型，可以通过 iterator 方法来获取一个迭代对象，调用迭代对象的 next 方法将获取一个元素对象，如下示例。</p>\n<pre><code class=\"language-js\">var iterable = [1, 2];\n \nvar iterator = iterable[Symbol.iterator]();\n \niterator.next(); // => { value: \"1\", done: false}\niterator.next(); // => { value: \"2\", done: false}\n \niterator.next(); // => { value: undefined, done: true}\n</code></pre>\n<h3>RxJS 的观察者 + 迭代器模式</h3>\n<p>RxJS 中含有两个基本概念：Observables 与 Observer。Observables 作为被观察者，是一个值或事件的流集合；而 Observer 则作为观察者，根据 Observables 进行处理。\nObservables 与 Observer 之间的订阅发布关系(观察者模式) 如下：</p>\n<p><code>订阅</code>：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。</p>\n<p><code>发布</code>：Observable 通过回调 next 方法向 Observer 发布事件。</p>\n<p>下面为 Observable 与 Observer 的伪代码</p>\n<pre><code class=\"language-js\">// Observer\nvar Observer = {\n    next(value) {\n        alert(`收到${value}`);\n    }\n};\n \n// Observable\nfunction Observable (Observer) {\n    setTimeout(()=>{\n        Observer.next('A');\n    },1000)\n}\n \n// subscribe\nObservable(Observer);\n</code></pre>","frontmatter":{"title":"RxJS"}}},"pageContext":{"slug":"/notes/RxJS/","tagPath":"/Javascript/RxJS/"}}