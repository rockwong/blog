{"data":{"markdownRemark":{"html":"<h1>Git常用命令</h1>\n<p>Git 游戏用来练习 git命令行 <a href=\"http://www.jianshu.com/p/482b32716bbe\">http://www.jianshu.com/p/482b32716bbe</a>,</p>\n<h2>配置</h2>\n<p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<pre><code class=\"language-bash\"># 显示当前的Git配置\n$ git config --list\n\n#查看用户名\n$ git config --global user.name  \n\n# 记住git 账户及密码\ngit config --global credential.helper store\n\n#查看邮箱\n$ git config --global user.email  \n\n# Git显示颜色\n$ git config --global color.ui true   \n</code></pre>\n<h2>新建仓库</h2>\n<pre><code class=\"language-bash\"># 在当前目录新建一个git仓库\n$ git init                 \n\n#复制一个git仓库\n$ git clone url\n</code></pre>\n<h2>查看文件</h2>\n<pre><code>#查看指定文件的log,  -p:查看代码行的详细修改\n$ git log -- [-p]  [file]\n\n# 查看commit的数量\n$ git rev-list master  --count\n</code></pre>\n<h2>增加/删除文件</h2>\n<pre><code class=\"language-bash\"># 将当前目录文件添加的到仓库\n$ git add .             \n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file] \n\n#撤销本地修改\n$ git checkout -- /there/is/a/modified/file\n\n#撤销暂存区修改\n$git reset HEAD  /path/\n\n$ git reset --hard # removes staged and working directory changes\n$ git clean -f -d # remove untracked\n</code></pre>\n<h2>代码提交</h2>\n<pre><code class=\"language-bash\"># 查看分支的提交数量\n$ git rev-list master --count \n\n# 当前commit 在分支中的计数\n$ git rev-list --count HEAD\n\n\n# 将文件提交到仓库\n$ git commit -m [message] \n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n$ git status               # 查看当前库状态\n\n$ git diff filename        # 提交前查看文件差异     \n\n$ git log                  # 一行 --oneline,内容--patch,概述--stat\n\n$ git reflog               # 命令历史\n\n$ git reset --hard HEAD^    # 回退到上一个版本\n--soft 参数将上一次的修改放入 staging area\n--mixed 参数将上一次的修改放入 working directory\n--hard 参数直接将上一次的修改抛弃\n\n$ git rebase  origin/master    #以替代的方式拉取远程的提交\n\n$ git blame  # 查看代码每行修改的作者\n\n$ git checkout  #切换branch的名称或者tag名称，如果冲突 tag/tagname\n\n$ git cherry-pick commit_id   #将选中的commit加入到当前分支\n$ git cherry-pick &#x3C;start-commit-id>..&#x3C;end-commit-id> #将start-commit-id（不包括） 到 end-commit-id加入到当前分支\n\n$ git commit --amend  #\n</code></pre>\n<h2>代码合并</h2>\n<pre><code class=\"language-bash\">    #合并分支上的提交\n    $ git merge --squash another\n    \n    #创建空白分支\n    $ git checkout --orphan gh-pages \n    \n    #引入来自其它分支的文件\n    $ git checkout other_branch_name  files/to/grab in/list/separated/by/spaces -p\n</code></pre>\n<h2>代码推送</h2>\n<pre><code class=\"language-bash\"># push 本地 test 分支作为远程的 master分支\n$ git push origin test:master\n\n# 推送本地目录 dist 到远程分支的gh-pages\n$ git subtree push --prefix dist origin gh-pages\n</code></pre>\n<h2>进阶命令</h2>\n<h3>checkout</h3>\n<pre><code class=\"language-bash\">$ git checkout –b new_branch local_branch   #切换到某个本地分支local_branch，用此分支初始化一个新分支new_branch\n$ git checkout –b new_branch remote_branch  #切换到某个远程分支remote_branch，用此分支初始化一个新分支new_branch。\n$ git checkout –b new_branch commit_id      #切换到某个commit id，并建立新分支new_branch\n$ git checkout –b new_branch tag            #切换到某个tag，并建立新分支new_branch\n</code></pre>\n<h3>bisect</h3>\n<p>使用\"两分法\"查错</p>\n<pre><code class=\"language-bash\">$ git bisect start HEAD start_commit_id  # 设置开始和结束的commit,自动切换到中间的commit\n\n$ git bisect good # 检查代码如果正确输入该命令\n\n$ git bisect bad # 检查代码如果错误输入该命令\n\n$ git bisect reset # 查找到错误退出查错，去修复代码即可\n</code></pre>\n<h2>使用技巧</h2>\n<h3>删除错误提交的commit</h3>\n<pre><code>git reset --hard &#x3C;commit_id>\ngit push origin HEAD --force\n</code></pre>\n<h2>zsh git alias</h2>\n<blockquote>\n<p>.oh-my-zsh/plugins/git/git.plugin.zsh</p>\n</blockquote>\n<pre><code class=\"language-bash\">alias g='git'\nalias ga='git add'\nalias gaa='git add --all'\n\nalias gb='git branch'\nalias gba='git branch -a'  # 查看所有分支\nalias gbd='git branch -d'  # delete branch\n\nalias gc='git commit -v'  # 查看修改内容并提交\nalias gc!='git commit -v --amend' # 替代上次提交或改写\nalias gca='git commit -v -a'  #提交所有修改\nalias gcam='git commit -a -m'  # 提交搜索有修改并添加说明\n\nalias gcb='git checkout -b'  # 创建并切换分支\nalias gcm='git checkout master'\nalias gcd='git checkout develop'\n\nalias gcp='git cherry-pick'\nalias gcpa='git cherry-pick --abort'\n\nalias gf='git fetch'\nalias gfo='git fetch origin'\n\nalias gl='git pull'\n\nalias glo='git log --oneline --decorate'\n\nalias gm='git merge'\nalias gmom='git merge origin/master'\n\nalias gp='git push'\n\nalias gr='git remote'\nalias gra='git remote add'\nalias grv='git remote -v'\n\nalias grh='git reset HEAD'\nalias grhh='git reset HEAD --hard'\n\nalias gst='git status'\n</code></pre>","frontmatter":{"title":"Git常用命令"}}},"pageContext":{"slug":"/notes/Git常用命令/","tagPath":"/Tools/Git常用命令/"}}