{"data":{"markdownRemark":{"html":"<h1>按位操作符（Bitwise operators）</h1>\n<p>将其操作数（operands）当作32位的比特序列（由0和1组成），而不是十进制、十六进制或八进制数值.</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>按位与（ AND）</td>\n<td>a &#x26; b</td>\n<td>对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。</td>\n</tr>\n<tr>\n<td>按位或（OR）</td>\n<td>a</td>\n<td>b</td>\n</tr>\n<tr>\n<td>按位异或（XOR）</td>\n<td>a ^ b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。</td>\n</tr>\n<tr>\n<td>按位非（NOT）</td>\n<td>~ a</td>\n<td>反转操作数的比特位，即0变成1，1变成0。</td>\n</tr>\n<tr>\n<td>左移（Left shift）</td>\n<td>a &#x3C;&#x3C; b</td>\n<td>将 a 的二进制形式向左移 b (&#x3C; 32) 比特位，右边用0填充。</td>\n</tr>\n<tr>\n<td>有符号右移</td>\n<td>a >> b</td>\n<td>将 a 的二进制表示向右移 b (&#x3C; 32) 位，丢弃被移出的位。</td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>a >>> b</td>\n<td>将 a 的二进制表示向右移 b (&#x3C; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>\n</tr>\n</tbody>\n</table>\n<h2>操作符掩码</h2>\n<pre><code class=\"language-js\">    \n    // 多个场景统计，只统计一次\n    var screenTrackFlag = 0;  // 跟踪场景（index）的统计情况\n   function trackScreen(screenIndex) {\n        var screenBit = (1 &#x3C;&#x3C; screenIndex);  // 1 左移 场景的index，即当前场景的二进制\n        if ((screenTrackFlag &#x26; screenBit) == 0) {   // 场景的二进制与screenTrackFlag对比，确认没有执行过\n            screenTrackFlag = screenTrackFlag | screenBit;\n        }\n    }\n</code></pre>\n<h2>取整</h2>\n<p><code>1.23&#x3C;&#x3C;0</code> 左移运算符 ，舍弃小数部分\n<code>1.23>>0</code> 右移运算符，舍弃小数部分</p>\n<h2>值交换</h2>\n<pre><code>var a = 5\nvar b = 8\na ^= b\nb ^= a\na ^= b\nconsole.log(a)   // 8\nconsole.log(b)   // 5\n</code></pre>\n<h2>使用&#x26;, >>, |来完成rgb值和16进制颜色值之间的转换</h2>\n<pre><code class=\"language-js\">/**\n * 16进制颜色值转RGB\n * @param  {String} hex 16进制颜色字符串\n * @return {String}     RGB颜色字符串\n */\n  function hexToRGB(hex) {\n    var hexx = hex.replace('#', '0x')\n    var r = hexx >> 16\n    var g = hexx >> 8 &#x26; 0xff\n    var b = hexx &#x26; 0xff\n    return `rgb(${r}, ${g}, ${b})`\n}\n\n/**\n * RGB颜色转16进制颜色\n * @param  {String} rgb RGB进制颜色字符串\n * @return {String}     16进制颜色字符串\n */\nfunction RGBToHex(rgb) {\n    var rgbArr = rgb.split(/[^\\d]+/)\n    var color = rgbArr[1]&#x3C;&#x3C;16 | rgbArr[2]&#x3C;&#x3C;8 | rgbArr[3]\n    return '#'+ color.toString(16)\n}\n// -------------------------------------------------\nhexToRGB('#ffffff')               // 'rgb(255,255,255)'\nRGBToHex('rgb(255,255,255)')      // '#ffffff'\n</code></pre>","frontmatter":{"title":"按位操作符（Bitwise operators）"}}},"pageContext":{"slug":"/notes/按位操作符（Bitwise operators）/","tagPath":"/Javascript/按位操作符（Bitwise operators）/"}}