{"data":{"markdownRemark":{"html":"<h1>正则表达式</h1>\n<h3>参考</h3>\n<blockquote>\n<p> <a href=\"http://deerchao.net/tutorials/regex/regex.htm\">http://deerchao.net/tutorials/regex/regex.htm</a>\n《精通正则表达式》</p>\n</blockquote>\n<h2>常用元字符</h2>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母或数字或下划线或汉字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任意的空白符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配单词的开始或结束</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配字符串的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配字符串的结束</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>匹配列出的任意字符</td>\n</tr>\n<tr>\n<td><code>|</code></td>\n<td>匹配分割两边的任意表达式</td>\n</tr>\n</tbody>\n</table>\n<h2>反义</h2>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\W</td>\n<td>匹配任意不是字母，数字，下划线，汉字的字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任意不是空白符的字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配任意非数字的字符</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配不是单词开头或结束的位置</td>\n</tr>\n<tr>\n<td><code>[^x]</code></td>\n<td>匹配除了x以外的任意字符</td>\n</tr>\n<tr>\n<td><code>[^aeiou]</code></td>\n<td>匹配除了aeiou这几个字母以外的任意字符</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>例子：<code>\\S+</code>匹配不包含空白符的字符串。</p>\n</blockquote>\n<h2>常用的限定符</h2>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>重复零次或更多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>重复一次或更多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>重复零次或一次</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>重复n次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>重复n次或更多次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>重复n到m次</td>\n</tr>\n</tbody>\n</table>\n<h2>条件分支</h2>\n<p>设定几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用 <code>|</code> 把不同的规则分隔开</p>\n<blockquote>\n<p>从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件</p>\n</blockquote>\n<h2>分组</h2>\n<p>如果想要重复或操作多个字符,可以用小括号来指定子<strong>表达式</strong>(也叫做分组)</p>\n<p><strong>向后引用</strong></p>\n<p>用于重复搜索前面某个分组匹配的文本。例如，<code>\\1</code>代表分组1匹配的文本(\\0 为整个表达式)</p>\n<p>重复字母：<code>/(\\w+).*\\1/.test('abcdea')</code></p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(exp)</td>\n<td>匹配exp,并捕获文本到自动命名的组里</td>\n</tr>\n<tr>\n<td>(?:exp)</td>\n<td>匹配exp,但不添加到命名的组里（会比上一条性能更好）</td>\n</tr>\n</tbody>\n</table>\n<h2>匹配位置</h2>\n<p>类似 <code>\\b</code>、<code>^</code>、<code>$</code> 用于指定一个位置，该位置满足一定的条件即表达式或断言</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n<th>范例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(?=exp)</td>\n<td>匹配exp前面的位置</td>\n<td>'abc'.replace(/(?=bc)/g,'@')</td>\n<td>a@bc</td>\n</tr>\n<tr>\n<td>(?&#x3C;=exp)</td>\n<td>匹配exp后面的位置</td>\n<td>'abc'.replace(/(?&#x3C;=bc)/g,'@')</td>\n<td>abc@</td>\n</tr>\n<tr>\n<td>(?!exp)</td>\n<td>匹配后面跟的不是exp的位置</td>\n<td>'abc'.replace(/(?!bc)/g,'@')</td>\n<td>@ab@c@</td>\n</tr>\n<tr>\n<td>(?&#x3C;!exp)</td>\n<td>匹配前面不是exp的位置</td>\n<td>'abc'.replace(/(?&#x3C;!bc)/g,'@')</td>\n<td>@a@b@c</td>\n</tr>\n</tbody>\n</table>\n<h2>贪婪与懒惰</h2>\n<p><code>贪婪匹配</code> 重复的限定符的通常行为是匹配尽可能多的字符\n<code>懒惰匹配</code> 重复的限定符的尽可能匹配少的字符</p>\n<pre><code class=\"language-js\">'abcabc'.replace(/a.*c/,'@') // 贪婪 @ \n\n'abcabc'.replace(/a.*?c/,'@') // 懒惰 @abc \n</code></pre>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*?</td>\n<td>重复任意次，但尽可能少重复</td>\n</tr>\n<tr>\n<td>+?</td>\n<td>重复1次或更多次，但尽可能少重复</td>\n</tr>\n<tr>\n<td>??</td>\n<td>重复0次或1次，但尽可能少重复</td>\n</tr>\n<tr>\n<td>{n,m}?</td>\n<td>重复n到m次，但尽可能少重复</td>\n</tr>\n<tr>\n<td>{n,}?</td>\n<td>重复n次以上，但尽可能少重复</td>\n</tr>\n</tbody>\n</table>\n<h2>正则表达式标志</h2>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>g</td>\n<td>全局搜索。</td>\n</tr>\n<tr>\n<td>i</td>\n<td>不区分大小写搜索。</td>\n</tr>\n<tr>\n<td>m</td>\n<td>多行搜索。</td>\n</tr>\n<tr>\n<td>y</td>\n<td>执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标志。</td>\n</tr>\n</tbody>\n</table>\n<h2>常用特殊字符</h2>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\b</td>\n<td>通常是单词分界位置，但如果在字符类里使用代表退格</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符，Tab</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符</td>\n</tr>\n</tbody>\n</table>\n<h2>String.prototype.replace()  正则的字符串参数</h2>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>代表的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$$</td>\n<td>插入一个 \"$\"。</td>\n</tr>\n<tr>\n<td>$&#x26;</td>\n<td>插入匹配的子串。</td>\n</tr>\n<tr>\n<td>$`\t\t | 插入当前匹配的子串左边的内容。</td>\n<td></td>\n</tr>\n<tr>\n<td>$'</td>\n<td>插入当前匹配的子串右边的内容。</td>\n</tr>\n<tr>\n<td>$n</td>\n<td>插入第 n 个括号匹配的字符串。提示：索引是从1开始</td>\n</tr>\n</tbody>\n</table>\n<h2>表达式</h2>\n<p>汉字：<code>^[\\u4e00-\\u9fa5]$</code></p>\n<p>含有<code>^%&#x26;',;=?$\\\"</code>等字符 ： <code>[^%&#x26;',;=?$\\x22]+</code></p>\n<p>含有~的字符：<code>[^~\\x22]+</code></p>\n<p>空白行：<code>\\n\\s*\\r</code></p>\n<p>HTMl标记：<code>&#x3C;(\\S?)[^>]*>|&#x3C;.* /></code></p>","frontmatter":{"title":"正则表达式"}}},"pageContext":{"slug":"/notes/正则表达式/","tagPath":"/Javascript/正则表达式/"}}