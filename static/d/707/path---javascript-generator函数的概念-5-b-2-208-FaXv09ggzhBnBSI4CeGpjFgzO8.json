{"data":{"markdownRemark":{"html":"<h1>Generator函数的概念</h1>\n<p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。</p>\n<p>next 方法的作用是分阶段执行 Generator 函数。每次调用 next 方法，会返回一个对象，表示当前阶段的信息（ value 属性和 done 属性）。value 属性是 yield 语句后面表达式的值，表示当前阶段的值；done 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。</p>\n<pre><code class=\"language-javascript\">function* gen(x){\n  var y = yield x + 2;\n  return y;\n}\n\nvar g = gen(1);\ng.next() // { value: 3, done: false }\ng.next(2) // { value: 2, done: true }\n</code></pre>\n<p>第一个 next 方法的 value 属性，返回表达式 x + 2 的值（3）。第二个 next 方法带有参数2，这个参数可以传入 Generator 函数，作为上个阶段异步任务的返回结果，被函数体内的变量 y 接收。因此，这一步的 value 属性，返回的就是2（变量 y 的值）</p>\n<blockquote>\n<p>参考 <a href=\"http://www.ruanyifeng.com/blog/2015/04/generator.html\">http://www.ruanyifeng.com/blog/2015/04/generator.html</a></p>\n</blockquote>","frontmatter":{"title":"Generator函数的概念"}}},"pageContext":{"slug":"/notes/Generator函数的概念/","tagPath":"/Javascript/Generator函数的概念/"}}