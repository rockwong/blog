{"data":{"markdownRemark":{"html":"<h1>脚手架工具 vue-cli</h1>\n<h2>参数说明</h2>\n<p>一. 功能选择</p>\n<p> ◉ <code>Babel</code>  js 低版本语言转换，建议勾选<br>\n◉ <code>TypeScript</code> Ts 支持，根据需要勾选\n◉ <code>Progressive Web App (PWA) Support</code> 利用 Service Worker 提升用户体验\n◉ <code>Router</code> vue 官方路由，用作页面跳转\n◉ <code>Vuex</code> 数据管理，类似Redux\n◉ <code>CSS Pre-processors</code> scss postcss的支持\n◉ <code>Linter / Formatter</code> 使用代码格式规范\n◯ <code>Unit Testing</code> 测试方法\n◉ <code>E2E Testing</code> 测试方法</p>\n<p> 二.  class-style component 以 class的方式写 vue的组件</p>\n<ol>\n<li><code>methods</code>，钩子都可以直接写作<code>class</code>的方法</li>\n<li><code>computed</code>属性可以直接通过<code>get</code>来获得</li>\n<li>初始化<code>data</code>可以声明为<code>class</code>的属性</li>\n<li>其他的都可以放到<code>Component</code>装饰器里</li>\n</ol>\n<pre><code class=\"language-ts\">import Vue from 'vue'\nimport Component from 'vue-class-component'\n\n// @Component 修饰符注明了此类为一个 Vue 组件\n@Component({\n  // 所有的组件选项都可以放在这里\n  template: '&#x3C;button @click=\"onClick\">Click!&#x3C;/button>'\n})\nexport default class MyComponent extends Vue {\n  // 初始数据可以直接声明为实例的属性\n  message: string = 'Hello!'\n\n  // 组件方法也可以直接声明为实例的方法\n  onClick (): void {\n    window.alert(this.message)\n  }\n}\n</code></pre>\n<p>三 . Use Babel alongside TypeScript for auto-detected polyfills? -> 是否用babel做转义</p>\n<p>四. Use history mode for router -> 路由是否用 <code>history</code> 模式，或者 <code>hash</code> 模式。</p>\n<p>五. Pick a CSS pre-processor  ->  css 的预编译选择 <code>scss/sass</code></p>\n<p>六. 格式化语言选择 <code>ESLint + Prettier</code></p>\n<p>七. 选择 <code>E2E testing solution</code> -> 选择测试方案 <code>Nightwatch (Selenium-based)</code> vue 测试框架</p>","frontmatter":{"title":"脚手架工具 vue-cli"}}},"pageContext":{"slug":"/notes/脚手架工具 vue-cli/","tagPath":"/Vue/脚手架工具 vue-cli/"}}