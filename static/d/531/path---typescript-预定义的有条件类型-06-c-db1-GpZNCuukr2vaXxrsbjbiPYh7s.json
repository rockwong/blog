{"data":{"markdownRemark":{"html":"<h1>预定义的有条件类型</h1>\n<ul>\n<li><code>Exclude&#x3C;T, U></code> -- 从<code>T</code>中剔除可以赋值给<code>U</code>的类型。</li>\n<li><code>Extract&#x3C;T, U></code> -- 提取<code>T</code>中可以赋值给<code>U</code>的类型。</li>\n<li><code>NonNullable&#x3C;T></code> -- 从<code>T</code>中剔除<code>null</code>和<code>undefined</code>。</li>\n<li><code>ReturnType&#x3C;T></code> -- 获取函数返回值类型。</li>\n<li><code>InstanceType&#x3C;T></code> -- 获取构造函数类型的实例类型。</li>\n</ul>\n<h2>示例</h2>\n<pre><code class=\"language-ts\">type T00 = Exclude&#x3C;\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"b\" | \"d\"\ntype T01 = Extract&#x3C;\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"a\" | \"c\"\n\ntype T02 = Exclude&#x3C;string | number | (() => void), Function>;  // string | number\ntype T03 = Extract&#x3C;string | number | (() => void), Function>;  // () => void\n\ntype T04 = NonNullable&#x3C;string | number | undefined>;  // string | number\ntype T05 = NonNullable&#x3C;(() => string) | string[] | null | undefined>;  // (() => string) | string[]\n\nfunction f1(s: string) {\n    return { a: 1, b: s };\n}\n\nclass C {\n    x = 0;\n    y = 0;\n}\n\ntype T10 = ReturnType&#x3C;() => string>;  // string\ntype T11 = ReturnType&#x3C;(s: string) => void>;  // void\ntype T12 = ReturnType&#x3C;(&#x3C;T>() => T)>;  // {}\ntype T13 = ReturnType&#x3C;(&#x3C;T extends U, U extends number[]>() => T)>;  // number[]\ntype T14 = ReturnType&#x3C;typeof f1>;  // { a: number, b: string }\ntype T15 = ReturnType&#x3C;any>;  // any\ntype T16 = ReturnType&#x3C;never>;  // any\ntype T17 = ReturnType&#x3C;string>;  // Error\ntype T18 = ReturnType&#x3C;Function>;  // Error\n\ntype T20 = InstanceType&#x3C;typeof C>;  // C\ntype T21 = InstanceType&#x3C;any>;  // any\ntype T22 = InstanceType&#x3C;never>;  // any\ntype T23 = InstanceType&#x3C;string>;  // Error\ntype T24 = InstanceType&#x3C;Function>;  // Error\n</code></pre>","frontmatter":{"title":"预定义的有条件类型"}}},"pageContext":{"slug":"/notes/预定义的有条件类型/","tagPath":"/Typescript/预定义的有条件类型/"}}